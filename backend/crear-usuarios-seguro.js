#!/usr/bin/env node

/**
 * SCRIPT SEGURO - Creaci√≥n de Usuarios
 * ====================================
 * 
 * Este script NO contiene contrase√±as hardcodeadas.
 * Las contrase√±as se leen de variables de entorno o se solicitan al usuario.
 * 
 * IMPORTANTE: Este es el m√©todo CORRECTO y SEGURO para manejar credenciales.
 */

const { supabase } = require('./supabase');
const bcrypt = require('bcrypt');
const readline = require('readline');

// Interfaz para input del usuario
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

async function preguntarContrasena(usuario) {
  return new Promise((resolve) => {
    rl.question(`Ingrese contrase√±a segura para usuario '${usuario}': `, (password) => {
      resolve(password);
    });
  });
}

async function crearUsuarioSeguro(nombre, usuario) {
  try {
    // Opci√≥n 1: Leer de variable de entorno (M√ÅS SEGURO)
    let password = process.env[`PASSWORD_${usuario.toUpperCase()}`];
    
    // Opci√≥n 2: Si no hay variable de entorno, solicitar al usuario
    if (!password) {
      console.log(`\nüîê No se encontr√≥ variable de entorno PASSWORD_${usuario.toUpperCase()}`);
      password = await preguntarContrasena(usuario);
    }
    
    if (!password || password.length < 8) {
      console.log(`‚ùå Error: La contrase√±a para '${usuario}' debe tener al menos 8 caracteres`);
      return false;
    }
    
    // Hashear la contrase√±a
    const salt = await bcrypt.genSalt(12); // Usar sal m√°s fuerte
    const hashedPassword = await bcrypt.hash(password, salt);
    
    // Crear usuario en Supabase
    const { data, error } = await supabase
      .from('usuarios')
      .insert([{
        nombre: nombre,
        usuario: usuario,
        password: hashedPassword
      }])
      .select()
      .single();
    
    if (error) {
      if (error.code === '23505') { // Duplicate key
        console.log(`‚ö†Ô∏è  Usuario '${usuario}' ya existe, actualizando contrase√±a...`);
        
        // Actualizar contrase√±a existente
        const { error: updateError } = await supabase
          .from('usuarios')
          .update({ password: hashedPassword })
          .eq('usuario', usuario);
        
        if (updateError) {
          console.log(`‚ùå Error al actualizar usuario '${usuario}':`, updateError.message);
          return false;
        }
        
        console.log(`‚úÖ Contrase√±a actualizada para usuario '${usuario}'`);
      } else {
        console.log(`‚ùå Error al crear usuario '${usuario}':`, error.message);
        return false;
      }
    } else {
      console.log(`‚úÖ Usuario '${usuario}' creado correctamente (ID: ${data.id})`);
    }
    
    return true;
    
  } catch (error) {
    console.log(`‚ùå Error al procesar usuario '${usuario}':`, error.message);
    return false;
  }
}

async function main() {
  console.log('üîí Script Seguro de Creaci√≥n de Usuarios');
  console.log('======================================\n');
  
  console.log('üí° M√âTODOS SEGUROS para definir contrase√±as:');
  console.log('   1. Variables de entorno: PASSWORD_CENTRAL=tu_contrase√±a_segura');
  console.log('   2. Input manual (se solicitar√° durante ejecuci√≥n)');
  console.log('   3. Archivo .env (solo para desarrollo local)\n');
  
  // Verificar conexi√≥n
  try {
    const { error } = await supabase.from('usuarios').select('count', { count: 'exact', head: true });
    if (error) {
      console.log('‚ùå Error de conexi√≥n con Supabase:', error.message);
      process.exit(1);
    }
    console.log('‚úÖ Conexi√≥n con Supabase establecida\n');
  } catch (error) {
    console.log('‚ùå Error fatal de conexi√≥n:', error.message);
    process.exit(1);
  }
  
  // Definir usuarios que necesitas (SIN CONTRASE√ëAS)
  const usuariosACrear = [
    { nombre: 'Local Central', usuario: 'central' },
    { nombre: 'Local Norte', usuario: 'norte' },
    { nombre: 'Local Sur', usuario: 'sur' },
    { nombre: 'Local Este', usuario: 'este' },
    { nombre: 'Local Oeste', usuario: 'oeste' },
    { nombre: 'Local Centro', usuario: 'centro' }
  ];
  
  console.log('üë• Usuarios a crear/actualizar:');
  usuariosACrear.forEach(u => console.log(`   - ${u.nombre} (${u.usuario})`));
  console.log('');
  
  // Crear cada usuario de forma segura
  for (const userData of usuariosACrear) {
    await crearUsuarioSeguro(userData.nombre, userData.usuario);
  }
  
  console.log('\nüéâ Proceso completado');
  console.log('\nüìã Verificaci√≥n final...');
  
  // Mostrar usuarios creados (SIN CONTRASE√ëAS)
  try {
    const { data: usuarios, error } = await supabase
      .from('usuarios')
      .select('id, nombre, usuario, creado_en')
      .order('id');
    
    if (error) {
      console.log('‚ùå Error al verificar usuarios:', error.message);
    } else {
      console.log('\n‚úÖ Usuarios en base de datos:');
      usuarios.forEach(u => {
        console.log(`   ${u.id}. ${u.nombre} (${u.usuario}) - Creado: ${new Date(u.creado_en).toLocaleDateString()}`);
      });
    }
  } catch (error) {
    console.log('‚ùå Error en verificaci√≥n:', error.message);
  }
  
  rl.close();
}

// Ejecutar script
if (require.main === module) {
  main()
    .then(() => {
      console.log('\nüèÅ Script finalizado de forma segura');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\nüí• Error fatal:', error);
      process.exit(1);
    });
}

module.exports = { crearUsuarioSeguro };